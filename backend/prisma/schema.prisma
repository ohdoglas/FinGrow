generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                String           @id @default(uuid()) @db.Uuid
  username          String           @unique @db.VarChar(50)
  email             String           @unique @db.VarChar(255)
  password          String           @db.VarChar(255)
  created_at        DateTime         @default(now())
  updated_at        DateTime         @updatedAt
  last_login        DateTime?
  status            Status           @default(ACTIVE)
  role              Roles            @default(USER)
  confirmationToken String?          @unique
  emailVerified     Boolean          @default(false)

  permissions       UserPermissions[]
  userRoles         UserRoles[]
  wallet            Wallet?          @relation("UserWallet") // Removi os parâmetros `fields` e `references`
  profile           UserProfile?
  loginAttempts     LoginAttempt[]   @relation("UserLoginAttempts")
  userAchievements  UserAchievements[]
  quizProgress      QuizProgress[]
}

model UserProfile {
  id            String   @id @default(uuid()) @db.Uuid
  user_id       String   @unique @db.Uuid
  bio           String?
  profile_image String?
  preferences   Json?
  created_at    DateTime @default(now())
  updated_at    DateTime @updatedAt
  user          User     @relation(fields: [user_id], references: [id])
}

model UserPermissions {
  id          String  @id @default(uuid()) @db.Uuid
  user_id     String  @db.Uuid
  permission  Permissions
  user        User    @relation(fields: [user_id], references: [id])
}

model UserRoles {
  id      String @id @default(uuid()) @db.Uuid
  user_id String @db.Uuid
  role    Roles
  user    User   @relation(fields: [user_id], references: [id])
}

model LoginAttempt {
  id         String   @id @default(uuid()) @db.Uuid
  user_id    String   @db.Uuid
  timestamp  DateTime @default(now())
  success    Boolean
  user       User     @relation("UserLoginAttempts", fields: [user_id], references: [id])
}

model Wallet {
  id           String       @id @default(uuid()) @db.Uuid
  user_id      String       @unique @db.Uuid
  balance      Decimal      @default(0.00)
  transactions Transaction[]
  created_at   DateTime     @default(now())
  updated_at   DateTime     @updatedAt
  user         User         @relation("UserWallet", fields: [user_id], references: [id]) // Agora, o `fields` e `references` estão apenas aqui
}

model Transaction {
  id         String   @id @default(uuid()) @db.Uuid
  wallet_id  String   @db.Uuid
  type       String   @db.VarChar(20) // DEPOSIT, PURCHASE, EARNED
  amount     Decimal  @db.Decimal(10, 2)
  created_at DateTime @default(now())
  wallet     Wallet   @relation(fields: [wallet_id], references: [id])
}

model Achievements {
  id           String            @id @default(uuid()) @db.Uuid
  name         String            @unique @db.VarChar(100)
  description  String?
  points       Int
  created_at   DateTime          @default(now())
  userAchievements UserAchievements[]
}

model UserAchievements {
  id              String         @id @default(uuid()) @db.Uuid
  user_id         String         @db.Uuid
  achievement_id  String         @db.Uuid
  unlocked_at     DateTime       @default(now())
  achievement     Achievements   @relation(fields: [achievement_id], references: [id])
  user            User           @relation(fields: [user_id], references: [id])
}

model Quizzes {
  id          String        @id @default(uuid()) @db.Uuid
  title       String        @unique
  description String?
  questions   Json
  created_at  DateTime      @default(now())
  quizProgress QuizProgress[]
}

model QuizProgress {
  id         String   @id @default(uuid()) @db.Uuid
  user_id    String   @db.Uuid
  quiz_id    String   @db.Uuid
  score      Int
  completed  Boolean  @default(false)
  completed_at DateTime?
  user       User     @relation(fields: [user_id], references: [id])
  quiz       Quizzes  @relation(fields: [quiz_id], references: [id])
}

model Ebooks {
  id         String   @id @default(uuid()) @db.Uuid
  title      String   @unique
  description String?
  content_url String
  price      Decimal  @default(0.00)
  created_at DateTime @default(now())
}

model Insights {
  id         String   @id @default(uuid()) @db.Uuid
  title      String   @unique
  content    String
  created_at DateTime @default(now())
}

enum Roles {
  ADMIN
  MODERATOR
  USER
  GUEST
}

enum Status {
  ACTIVE
  INACTIVE
  SUSPENDED
  DELETED
}

enum Permissions {
  READ_ONLY
  WRITE
  DELETE
  MANAGE_USERS
  VIEW_DASHBOARD
  EDIT_CONTENT
}
