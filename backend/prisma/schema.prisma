// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                String       @id @default(uuid()) @db.Uuid
  username          String       @unique @db.VarChar(50)
  email             String       @unique @db.VarChar(255)
  password          String       @db.VarChar(255)
  role              Roles        @default(USER)
  status            Status       @default(ACTIVE)
  confirmationToken String?      @unique
  emailVerified     Boolean      @default(false)
  last_login        DateTime?
  created_at        DateTime     @default(now())
  updated_at        DateTime     @updatedAt
  profile           UserProfile?
  loginAttempts     LoginAttempt[]
  permissions       UserPermissions[]
  wallet            Wallet?
  achievements      UserAchievements[]
  quizProgress      QuizProgress[]
}

model UserProfile {
  id            String   @id @default(uuid()) @db.Uuid
  user_id       String   @unique @db.Uuid
  bio           String?
  profile_image String?
  preferences   Json?
  created_at    DateTime @default(now())
  updated_at    DateTime @updatedAt
  user          User     @relation(fields: [user_id], references: [id])
}

model Wallet {
  id           String       @id @default(uuid()) @db.Uuid
  user_id      String       @unique @db.Uuid
  balance      Decimal      @default(0.00)
  transactions Transaction[]
  created_at   DateTime     @default(now())
  updated_at   DateTime     @updatedAt
  user         User         @relation(fields: [user_id], references: [id])
}

model Transaction {
  id         String   @id @default(uuid()) @db.Uuid
  wallet_id  String   @db.Uuid
  type       String   @db.VarChar(20) // DEPOSIT, PURCHASE, EARNED
  amount     Decimal  @db.Decimal(10, 2)
  created_at DateTime @default(now())
  wallet     Wallet   @relation(fields: [wallet_id], references: [id])
}

model Achievements {
  id           String            @id @default(uuid()) @db.Uuid
  name         String            @unique @db.VarChar(100)
  description  String?
  points       Int
  created_at   DateTime          @default(now())
  userAchievements UserAchievements[]
}

model UserAchievements {
  id              String         @id @default(uuid()) @db.Uuid
  user_id         String         @db.Uuid
  achievement_id  String         @db.Uuid
  unlocked_at     DateTime       @default(now())
  achievement     Achievements   @relation(fields: [achievement_id], references: [id])
  user            User           @relation(fields: [user_id], references: [id])
}

model Quizzes {
  id          String        @id @default(uuid()) @db.Uuid
  title       String        @unique
  description String?
  questions   Json
  created_at  DateTime      @default(now())
}

model QuizProgress {
  id         String   @id @default(uuid()) @db.Uuid
  user_id    String   @db.Uuid
  quiz_id    String   @db.Uuid
  score      Int
  completed  Boolean  @default(false)
  completed_at DateTime?
  user       User     @relation(fields: [user_id], references: [id])
  quiz       Quizzes  @relation(fields: [quiz_id], references: [id])
}

model Ebooks {
  id         String   @id @default(uuid()) @db.Uuid
  title      String   @unique
  description String?
  content_url String
  price      Decimal  @default(0.00)
  created_at DateTime @default(now())
}

model Insights {
  id         String   @id @default(uuid()) @db.Uuid
  title      String   @unique
  content    String
  created_at DateTime @default(now())
}
